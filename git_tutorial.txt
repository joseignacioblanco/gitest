

comenzando: 

datos que nececito

e-mail:
usuario:
contraseÃ±a:
token:
segundo factor de autenticacion:


-----------------------------------------------------
COMANDITO 1

para configurar la gitiada

> git config --global user.email "elmeil@gmail.com"

esto obvio que configura el meil
aparte de global puede ser local y sin nada.

> git config --global user.name "nombredeusuario"

para configurar el nombre de usuario. por convencion
siempre se pone el mismo nombre de usuario que utilizo
para github


----------------------------------------------------------
COMANDITO 2

> git init

esto lo uso cuando quiero comenzar a gitiar una carpeta
cuado hago esto en la carpeta se crea un archivo oculto
.git que va a encargarse de hacer el seguimiento de todo
este comando de git init lo debo poner una vez posicionado
en la carpeta que quiero gitiar

---------------------------------------------------------
COMANDITO 3

> git add <FILE>

uan vez gitiada la carpeta, si quiero agregar al esteiying
area algun archivo nuevo o algun cambio nuevo tengo que 
poner git add y seguido el nombre del archivo o tambien 
puedo porner la direccion completa o directorio acutal 
que es un punto (.)  o directorio anterior (..)  etc
si quiero estaigyiniar todo lo que contiene la carpeta 
en donde estoy posicionado , hago "> git add ."

git add .  ignora las carpetas que estan vacias aparentemente

---------------------------------------------------------
COMANDITO 4

> git status

este comandito me va mostrar el estatus de este directorio
gitiado en el que estoy trabajando y me va decir si hay 
archivos por agregar, si hay algo por comitiar o si esta
todo limpio.


--------------------------------------------------------
COMANDITO 5

> git commit -m "comentario de lo que comiteo"

con ese comandito lo que voy a hacer es un commit  que
vendria a ser la confirmacion de los cambios y pasarlos
al repositorio local. la opcion de -m y luego del espacio
entre comillas el comentario, es para que lo comitee con
el comentario directamente y no me abra el vim o algun
otro editor para escribir los comentarios.

la primera vez que quiera hacer commit, si no configurE
todavia el usuario y el meil, aqui me lo va pedir

-------------------------------------------------------
COMANDITO 6

> git clone <DIRECCION DEL REPOSITORIO>
 hace una copia o un clon del repositorio remoto al local


-----------------------------------------------------
COMANDITO 7

 > git pull

hace una actualizacion de alguna parte especifica de algun
repositorio remoto hacia el repositorio local

generalmente con git pull y nada mas ya anda pero si 
pide user y token

parece que se puede poner "git pull <FILE_NAME>"

para cuando es algo especifico:

 > git pull origin main

donde ahi ponemos origin que es el nombre que le dimos
al repositorio remoto y main viene siendo el nombre de
la rama que queremos pulliar en este caso la principal
que suele ser main o master


--------------------------------------------------
COMANDITO 8

> git push
hace una actualizacion del repo local hacia el remoto
ver tambien ejemplo 1

generalmente solo con git push y nada mas ya anda
pero antes pide usuario y token por lo menos en raspbian

cuando una vez hice git push me decia que alguien mas 
habia estado pushiando al repo remoto y que primero tengo
que hacer un pull para ponerme al dia y mergiar todo
entonces hago git pull y me dice que va mergiar lo del 
otro usuario con lo que yo quiero puchiar con cambios
y ahi mismo me hace el merge y me hace poner tambien
un comentario con el editor de texto. yo usaba el nano
asi que despues de cometar todo le puse control O de
omar para guardar y control x para salir y ahi se merjea
tambien me dice que si escribo lineas con # el comentario
se ignora.

obvio que tambien pide el usuario y el token


aqui tambien parece que se puede especificar los archivos
con git push <FILE_NAME>

pero aparte tambien parece que la primera vez que uno
hace el push tiene que poner 

 > git push -u origin master
o bien sino
 > git push -u origin main

hay que investigar un poco mas por que se pone con esos
modificadores y que significan en concreto

parece que le dice que va desde el repositorio local
que es origin hacia el remoto que es master o main 
segun como se configure

el origin es el nombre que se le da al repositorio
remoto por defecto y master o main es el nombre de 
la rama que se da por defecto a la principal
despues podemos crear otras ramas con otros nombres

-------------------------------------------------
COMANDITO 9

> git log

este comando me muestra el historial de todo lo que 
voy haciendo e incluso muestra los hash de cada comit
y la cabecera del proyecto y las ramas etc etc

cuando hay mucho info de log del istorial me va mostrando
pantalla por pantalla y voy bajando con el enter y despues
salgo con Q de quit.

----------------------------------------------------------
COMANDITO 10

> git checkout -- <FILE_NAME>

va a descartar los ultimos cambios que he agregado

por ejemplo puede ser "git checkout -- index.html"

------------------------------------------------------
COMANDITO 11

 > git diff <FILE_NAME>

por ejemplo si hago "git diff index.html"

este comandito me va a mostrar las diferencias que hay
entre el archivo original comitiado antes y los cambios
que he ingresado antes de hacer el otro comit

pero tambien puedo ver diferencias entre archivos de
distintas ramas

> git diff <rama_1> <rama_2>
 ejemplo "git diff master mondongo"

y me muestra que tiene la primera respecto de la segunda
pero cambia la informacion segun en que rama este parado
o bien sino mejor dicho en el orden que pongo las ramas 
"git diff mondongo master"


-------------------------------------------------------
COMANDITO 12 (no es un comando es un archivo)

 .gitignore

es un archivito de texto que puedo subir al repositorio
y dentro de el archivito tengo que listar todos los
nombres de archivos que quiero que ignore y que no 
me siga para comitiar y demas. entonces asi el git no
le da bola.

ejemplo: 

el archivo se debe llamar .gitignore
contenido: 

test
*.txt
mologaideses


etc etc etc  donde esos nombres son los nombres de carpetas
o de archivos que quiero ignorar. tambien con comodines

---------------------------------------------------------
COMANDITO 13

> git branch

me muestra en que rama estoy parado

-------------------------------------------------------
COMANDITO 14

> git branch mondongo

de esta manera creo la rama mondonogo.  asi solo creo
la nueva rama y si pongo git branch  me va mostrar todas
las que tengo creadas hasta el momento. para cambiar entre
ramas uso el comando git chackout mondongo donde mondongo
es el nombre de la rama a la que quiero ir.
Obcserbar que es el mismo comando que use antes para 
volver atras los cambios: git checkout --
bueno, es parecido nomas

si quiero cambiarle el nombre a la rama mondongo puedo
poner el comando -m de modificar

> git branch -m mondongo coyuya

y de esta manera le cambia de nombre mondongo a coyuya

tambien puedo usar el comando -d de delete para eliminar
una rama

 > git branch -d coyuya 

y asi elimino la rama coyuya pero tengo que estar parado
en una rama distinta porque sino me dice que no puede

esto me lleva a preguntarme si puedo eliminar la rama main
y en caso afirmativo cual pasa a ser la rama main ahora?

--------------------------------------------------------
COMANDITO 15

> git checkout mondongo

este si es el comando para poder cambiar entre ramas 
donde tengo que escribir el nombre de la rama a la cual
me quiero mover: en este caso se llamaba la rama mondongo


parece que si hago cambios en una rama nueva, los cambios
no van a ser de esa rrama hasta que los comitee. asi que 
en el directorio van a estar los archivos para todas las 
ramas indistintamente hasta que los comitee para una en 
particular


---------------------------------------------------------
COMANDITO 16

> git reset HEAD <FILE_NAME>

parece que este comandito me resetea o me saca del esteiyin
area los add. que hice en el paso anterior y antes de comitiar
pbviamente que lo hace desde el HEAD o sea en donde estoy.


---------------------------------------------------------
COMANDITO 17

 > git remote add origin <URL_HTTP>

parece que este comando le dice que vamos a asociar un
origen de codigos o sea un repositorio local al remoto
de github y le dice cual es la direccion del remoto
ejemplo https://github.co./joseignacioblanco/gitest.git


-----------------------------------------------------
COMANDITO 18

 > Readme.md (no es comando)

es un archivo que se agrega para usar el archivo de 
extension mark doun para dar una descripcion bonit de
lo que se trata el repositorio en la pantalla de github


------------------------------------------------------
COMANDITO 19

> git merge

 > git merge <rama_origen> <rama_destino>

este comando unifica dos ramas en una sola

 si quiero ir de la mondongo a la main debo poner

"git merge mondongo main"  y esto actualiza y fusiona
la rama main  con los cambios que tenga mondongo

pero lo que si es importante es que me tengo que parar
antes de hacer el merge en la rama main que es la que no
esta actualizada porque si me paro en mondongo que es la
que tiene que aportar los cambios a main entonces me va
decir que ya esta todo actualizado

esto me hace dudar del orden en que se ponen las ramas...

o sea que me paro en la rama que va recibir los cambios
a fusionar. entonces hago "git checkout main" y luego 
"git merge mondongo main"

luego de actualizar la rama main no debo olvidar hacer 
el correspondiente "git add." y el "git commit" correspondiente

----------------------------------------------------------------------

EJEMPLO 1

Ahora vamos a ver una forma de  como hacer para subir
un repositorio desde mi pc al repositorio remoto de github


1. Por ejemplo yo tengo una carpeta "Nueva_Carpeta"
en donde estuve trabajando con mis archivos dentro
se supone que ya hice git init, git add, git commit, etc etc
ya la tengo lista en mi pc que es el repo local y para subirla
a un repo remoto de github primero debo crear el repositorio 
remoto en el github asi que vo voy a agregar repositorio, le
doy un nombre, publico, etc etc y lo creo.  obvio que a se crea un
repositorio vacio y ahi nomas me da las inicaciones para poder 
subir lo que tengo en el repo local de mi pc:


> git remote add origin https://github.com/joseignacioblanco/gitest.git

donde despues de origin va la ruta de el repositorio creado obvio

luego ponemos : > git branch -M main

donde creo que en lugar de main puedo ponerle master o mondongo

y por ultimo: > git push -u origin main

donde main creo que es el nombre que le dia antes

luego de poner todo eso, me va pedir el usuario y el token (por lo menos lo pide asi en linux)


-------------------------------------------------------------------------
Para crear los acces token voy al github
arriba a la derecha en el perfil de usuario
voy a seetings
luego a developer seetings
luego a personal acces tokens
luego a generate new token

le pongo un nombre descriptivo
le pongo la caducidad
le pongo que quiero que maneje

luego generate token y lo copio para tenerlo guardado
porque sino no me lo muestra mas creo jajajaja


luego para configurar el gitbayh hago asi:


git config user.name "nombredeusuaario" (para el nombre de usuario)
git config user.email "meil@gmail.com"  (para el mEil)

esto ya lo sabiamos (puede ir con comillas o no al parecer)


y ahora para el token

got config user.password "el_chorizo_token" (para el token)

ojo que no es la contraseÃ±a de la cuenta sino el token
lo que no es lo mismo.

no olvidar tambie que si hago todo por primera vez,
tengo que configurar la comunicacion con el repo local y
el remoto y eso se hacia con

git remote add origin <https://github.com/blablabla>

fijate que ahi le da el apodo del repo remoto y la url
el apodo es origin por convencion

si luego hago tambien por primera vez el git add el git commit
y el git push hago "git push -u origin main" 


-----------------------------------------------------


glosario

working area

staging area

repository

commits


